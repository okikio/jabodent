{"version":3,"sources":["api.ts"],"names":[],"mappings":"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","file":"../api.js","sourcesContent":["// The config variables\r\nexport interface ICONFIG {\r\n    prefix?: string;\r\n    wrapperAttr?: string;\r\n    noAjaxLinkAttr?: string;\r\n    noPrefetchAttr?: \"no-prefetch\";\r\n    headers?: string[][];\r\n    preventSelfAttr?: string;\r\n    preventAllAttr?: string;\r\n    transitionAttr?: string;\r\n    blockAttr?: string;\r\n    timeout?: number\r\n}\r\n\r\nexport const CONFIG_DEFAULTS: ICONFIG = {\r\n    wrapperAttr: \"wrapper\",\r\n    noAjaxLinkAttr: \"no-ajax-link\",\r\n    noPrefetchAttr: \"no-prefetch\",\r\n    headers: [\r\n        [\"x-partial\", \"true\"]\r\n    ],\r\n    preventSelfAttr: `prevent=\"self\"`,\r\n    preventAllAttr: `prevent=\"all\"`,\r\n    transitionAttr: \"transition\",\r\n    blockAttr: `block`,\r\n    timeout: 30000\r\n};\r\n\r\nexport type ConfigKeys = keyof ICONFIG;\r\n\r\n/**\r\n * The Config class\r\n *\r\n * @export\r\n * @class CONFIG\r\n */\r\nexport class CONFIG {\r\n    /**\r\n     * The current Configuration\r\n     *\r\n     * @protected\r\n     * @type ICONFIG\r\n     * @memberof CONFIG\r\n     */\r\n    protected config: ICONFIG;\r\n\r\n    /**\r\n     * Creates an instance of CONFIG.\r\n     *\r\n     * @param {ICONFIG} config\r\n     * @memberof CONFIG\r\n     */\r\n    constructor(config: ICONFIG) {\r\n        this.config = Object.assign({ ...CONFIG_DEFAULTS }, config);\r\n    }\r\n\r\n    /**\r\n     * Converts string into data attributes\r\n     *\r\n     * @param {string} value\r\n     * @param {boolean} brackets [brackets=true]\r\n     * @returns string\r\n     * @memberof CONFIG\r\n     */\r\n    public toAttr(value: string, brackets: boolean = true): string {\r\n        let { prefix } = this.config;\r\n        let attr = `data${prefix ? \"-\" + prefix : \"\"}-${value}`;\r\n        return brackets ? `[${attr}]` : attr;\r\n    }\r\n\r\n    /**\r\n     * Selects config vars, and formats them for use, or simply returns the current configurations for the framework\r\n     *\r\n     * @param {ConfigKeys} value\r\n     * @param {boolean} [brackets=true]\r\n     * @returns any\r\n     * @memberof CONFIG\r\n     */\r\n    public getConfig(value?: ConfigKeys, brackets: boolean = true): any {\r\n        if (typeof value !== \"string\")\r\n            return this.config;\r\n\r\n        let config = this.config[value];\r\n        if (typeof config === \"string\")\r\n            return this.toAttr(config, brackets);\r\n        return config;\r\n    }\r\n}\r\n\r\n/**\r\n * Manages complex lists of named data, eg. A page can be stored in a list by of other pages with the url being how the page is stored in the list. Managers use Maps to store data.\r\n *\r\n * @export\r\n * @class Manager\r\n * @template K\r\n * @template V\r\n */\r\nexport class Manager<K, V> {\r\n\t/**\r\n\t * The complex list of named data, to which the Manager controls\r\n\t *\r\n\t * @protected\r\n\t * @type Map<K, V>\r\n\t * @memberof Manager\r\n\t */\r\n    protected list: Map<K, V>;\r\n\r\n\t/**\r\n\t * Creates an instance of the Manager class.\r\n\t *\r\n\t * @memberof Manager\r\n\t * @constructor\r\n\t */\r\n    constructor() {\r\n        this.list = new Map();\r\n    }\r\n\r\n\t/**\r\n\t * Returns the Manager class's list\r\n\t *\r\n\t * @returns Map<K, V>\r\n\t * @memberof Manager\r\n\t */\r\n    public getList(): Map<K, V> {\r\n        return this.list;\r\n    }\r\n\r\n\t/**\r\n\t * Get a value stored in the Manager\r\n\t *\r\n\t * @public\r\n\t * @param  {K} key - The key to find in the Manager's list\r\n\t * @returns V\r\n\t */\r\n    public get(key: K): V {\r\n        return this.list.get(key);\r\n    }\r\n\r\n\t/**\r\n\t * Set a value stored in the Manager\r\n\t *\r\n\t * @public\r\n\t * @param  {K} key - The key where the value will be stored\r\n\t * @param  {V} value - The value to store\r\n\t * @returns Manager<K, V>\r\n\t */\r\n    public set(key: K, value: V): Manager<K, V> {\r\n        this.list.set(key, value);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the keys of all items stored in the Manager\r\n\t *\r\n\t * @public\r\n\t * @returns Array<K>\r\n\t */\r\n    public keys(): Array<K> {\r\n        return [...this.list.keys()];\r\n    }\r\n\r\n\t/**\r\n\t * Returns the total number of items stored in the Manager\r\n\t *\r\n\t * @public\r\n\t * @returns Number\r\n\t */\r\n    public size(): number {\r\n        return this.list.size;\r\n    }\r\n\r\n    /**\r\n\t * Returns the last item in the Manager who's index is a certain distance from the last item in the Manager\r\n     *\r\n     * @param {number} [distance=1]\r\n     * @returns V\r\n     * @memberof Manager\r\n     */\r\n    public last(distance: number = 1): V {\r\n        let size = this.size();\r\n        let key = this.keys()[size - distance];\r\n        return this.get(key);\r\n    }\r\n\r\n\t/**\r\n\t * Returns the second last item in the Manager\r\n\t *\r\n\t * @public\r\n\t * @returns V\r\n\t */\r\n    public prev(): V {\r\n        return this.last(2);\r\n    }\r\n\r\n\t/**\r\n\t * Removes a value stored in the Manager, via the key\r\n\t *\r\n\t * @public\r\n\t * @param  {K} key - The key for the key value pair to be removed\r\n\t * @returns Manager<K, V>\r\n\t */\r\n    public remove(key: K): Manager<K, V> {\r\n        this.list.delete(key);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Clear the Manager of all its contents\r\n\t *\r\n\t * @public\r\n\t * @returns Manager<K, V>\r\n\t */\r\n    public clear(): Manager<K, V> {\r\n        this.list.clear();\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Checks if the Manager contains a certain key\r\n\t *\r\n\t * @public\r\n\t * @param {K} key\r\n\t * @returns boolean\r\n\t */\r\n    public has(key: K): boolean {\r\n        return this.list.has(key);\r\n    }\r\n\r\n\t/**\r\n\t * Iterates through the Managers contents, calling a callback function every iteration\r\n\t *\r\n\t * @param {*} [callback=(...args: any): void => { }]\r\n\t * @param {object} context\r\n\t * @returns Manager<K, V>\r\n\t * @memberof Manager\r\n\t */\r\n    public forEach(\r\n        callback: any = (...args: any): void => { },\r\n        context?: object\r\n    ): Manager<K, V> {\r\n        this.list.forEach(callback, context);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Calls the method of a certain name for all items that are currently installed\r\n\t *\r\n\t * @param {string} method\r\n\t * @param {Array<any>} [args=[]]\r\n\t * @returns Manager<K, V>\r\n\t * @memberof Manager\r\n\t */\r\n    public methodCall(method: string, ...args: any): Manager<K, V> {\r\n        this.forEach((item: V) => {\r\n            // @ts-ignore\r\n            item[method](...args);\r\n        });\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Asynchronously calls the method of a certain name for all items that are currently installed, similar to methodCall\r\n\t *\r\n\t * @param {string} method\r\n\t * @param {Array<any>} [args=[]]\r\n\t * @returns Promise<Manager<K, V>>\r\n\t * @memberof Manager\r\n\t */\r\n    public async asyncMethodCall(method: string, ...args: any): Promise<Manager<K, V>> {\r\n        for await (let [, item] of this.list) {\r\n            // @ts-ignore\r\n            await item[method](...args);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * Controls lists of a certain type that follow chronological order, meant for the History class. Storage use Sets to store data.\r\n *\r\n * @export\r\n * @class Storage\r\n * @extends {Manager<number, V>}\r\n * @template V\r\n */\r\nexport class Storage<V> extends Manager<number, V> {\r\n\t/**\r\n\t * Creates an instance of Storage.\r\n\t *\r\n\t * @memberof Storage\r\n\t */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\t/**\r\n\t * Sets a value in the **Storage** class\r\n\t *\r\n\t * @param {number} key\r\n\t * @param {V} value\r\n\t * @returns Storage<V>\r\n\t * @memberof Storage\r\n\t */\r\n    public set(key: number, value: V): Storage<V> {\r\n        super.set(key, value);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Adds a value to Storage\r\n\t *\r\n\t * @public\r\n\t * @param  {V} value\r\n\t * @returns Storage<V>\r\n\t */\r\n    public add(value: V): Storage<V> {\r\n        let size = this.size();\r\n        this.set(size, value);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Lists all values stored in Storage.\r\n\t *\r\n\t * @returns IterableIterator<V>\r\n\t * @memberof Storage\r\n\t */\r\n    public values(): IterableIterator<V> {\r\n        return this.list.values();\r\n    }\r\n}\r\n\r\nexport type IAdvancedManager = AdvancedManager<any, ManagerItem> | AdvancedStorage<ManagerItem>;\r\n\r\n/**\r\n * The base class for all AdvancedManager and AdvancedStorage items\r\n *\r\n * @export\r\n * @class ManagerItem\r\n */\r\nexport class ManagerItem {\r\n    /**\r\n     * The AdvancedManager or AdvancedStorage the ManagerItem is attached to\r\n     *\r\n     * @protected\r\n     * @type IAdvancedManager\r\n     * @memberof ManagerItem\r\n     */\r\n    protected manager: IAdvancedManager;\r\n\r\n    /**\r\n     * Creates an instance of ManagerItem.\r\n     * \r\n     * @memberof ManagerItem\r\n     */\r\n    constructor() { }\r\n\r\n    /**\r\n     * The getConfig method for accessing the Configuration of the current App\r\n     *\r\n     * @param {ConfigKeys} [value]\r\n     * @param {boolean} [brackets]\r\n     * @returns any\r\n     * @memberof ManagerItem\r\n     */\r\n    protected getConfig(value?: ConfigKeys, brackets?: boolean): any {\r\n        return this.manager.getConfig(value, brackets);\r\n    };\r\n\r\n    /**\r\n     * Register the current Manager Item's manager\r\n     *\r\n     * @param {IAdvancedManager} manager\r\n     * @returns ManagerItem\r\n     * @memberof ManagerItem\r\n     */\r\n    public register(manager: IAdvancedManager): ManagerItem {\r\n        this.manager = manager;\r\n        this.install();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Run after the Manager Item has been registered\r\n     *\r\n     * @returns any\r\n     * @memberof ManagerItem\r\n     */\r\n    public install(): any { }\r\n}\r\n\r\n/**\r\n * A tweak to the Manager class that makes it self aware of the App class it's instantiated in\r\n *\r\n * @export\r\n * @class AdvancedManager\r\n * @extends {Manager<K, V>}\r\n * @template K\r\n * @template V\r\n */\r\nexport class AdvancedManager<K, V extends ManagerItem> extends Manager<K, V> {\r\n\t/**\r\n\t * The instance of the App class, the Manager is instantiated in\r\n\t *\r\n\t * @private\r\n\t * @type App\r\n\t * @memberof AdvancedManager\r\n\t */\r\n    private app: App;\r\n\r\n\t/**\r\n\t * Creates an instance of AdvancedManager.\r\n\t *\r\n\t * @param {App} app - The instance of the App class, the Manager is instantiated in\r\n\t * @memberof AdvancedManager\r\n\t */\r\n    constructor(app: App) {\r\n        super();\r\n        this.app = app;\r\n    }\r\n\r\n\t/**\r\n\t * Set a value stored in the Manager\r\n\t *\r\n\t * @public\r\n\t * @param  {K} key - The key where the value will be stored\r\n\t * @param  {V} value - The value to store\r\n\t * @returns AdvancedManager<K, V>\r\n\t */\r\n    public set(key: K, value: V): AdvancedManager<K, V> {\r\n        super.set(key, value);\r\n        value.register(this);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the instance the App class\r\n\t *\r\n\t * @returns App\r\n\t * @memberof AdvancedManager\r\n\t */\r\n    public getApp(): App {\r\n        return this.app;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the App config\r\n\t *\r\n     * @param {...any} args\r\n     * @returns any\r\n\t * @memberof AdvancedManager\r\n\t */\r\n    public getConfig(...args: any): any {\r\n        return this.app.getConfig(...args);\r\n    }\r\n}\r\n\r\n/**\r\n * A tweak to the Storage class that makes it self aware of the App class it's instantiated in\r\n *\r\n * @export\r\n * @class AdvancedStorage\r\n * @extends {Storage<V>}\r\n * @template V\r\n */\r\nexport class AdvancedStorage<V extends ManagerItem> extends Storage<V> {\r\n\t/**\r\n\t * The instance of the App class, the Manager is instantiated in\r\n\t *\r\n\t * @private\r\n\t * @type App\r\n\t * @memberof AdvancedStorage\r\n\t */\r\n    private app: App;\r\n\r\n\t/**\r\n\t * Creates an instance of AdvancedStorage.\r\n\t *\r\n\t * @param {App} app - The instance of the App class, the Manager is instantiated in\r\n\t * @memberof AdvancedStorage\r\n\t */\r\n    constructor(app: App) {\r\n        super();\r\n        this.app = app;\r\n    }\r\n\r\n\t/**\r\n\t * Set a value stored in AdvancedStorage\r\n\t *\r\n\t * @public\r\n\t * @param  {number} key - The number key where the value will be stored\r\n\t * @param  {V} value - The value to store\r\n\t * @returns AdvancedStorage<V>\r\n\t */\r\n    public set(key: number, value: V): AdvancedStorage<V> {\r\n        super.set(key, value);\r\n        value.register && value.register(this);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the instance the App class\r\n\t *\r\n\t * @returns App\r\n\t * @memberof AdvancedStorage\r\n\t */\r\n    public getApp(): App {\r\n        return this.app;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the App config\r\n\t *\r\n     * @param {...any} args\r\n     * @returns any\r\n\t * @memberof AdvancedStorage\r\n\t */\r\n    public getConfig(...args: any): any {\r\n        return this.app.getConfig(...args);\r\n    }\r\n}\r\n\r\n/**\r\n * Adds new methods to the native URL Object; it seemed cleaner than using a custom method or editing the prototype.\r\n *\r\n * This doesn't extend the **Class** object because it's meants to be a small extention of the native URL class.\r\n *\r\n * @export\r\n * @class _URL\r\n * @extends {URL}\r\n */\r\nexport class _URL extends URL {\r\n    // Read up on the native URL class [devdocs.io/dom/url]\r\n\t/**\r\n\t * Creates an instance of _URL.\r\n\t *\r\n     * @param {(string | _URL | URL | Location)} [url=window.location.pathname]\r\n\t * @memberof _URL\r\n\t */\r\n    constructor(url: any = window.location.href) {\r\n        super(url instanceof URL ? url.href : url, window.location.origin);\r\n    }\r\n\r\n    /**\r\n     * Returns the pathname with the hash\r\n     *\r\n     * @returns string\r\n     * @memberof _URL\r\n     */\r\n    public getFullPath(): string {\r\n        return `${this.pathname}${this.hash}`;\r\n    }\r\n\r\n    /**\r\n     * Returns the actual hash without the hashtag\r\n     *\r\n     * @returns string\r\n     * @memberof _URL\r\n     */\r\n    public getHash(): string {\r\n        return this.hash.slice(1);\r\n    }\r\n\r\n    /**\r\n\t * Removes the hash from the full URL for a clean URL string\r\n\t *\r\n\t * @returns string\r\n\t * @memberof _URL\r\n\t */\r\n    public clean(): string {\r\n        return this.toString().replace(/(\\/#.*|\\/|#.*)$/, '');\r\n    }\r\n\r\n\t/**\r\n\t * Returns the pathname of a URL\r\n\t *\r\n\t * @returns string\r\n\t * @memberof _URL\r\n\t */\r\n    public getPathname(): string {\r\n        return this.pathname;\r\n    }\r\n\r\n\t/**\r\n\t * Compares this **_URL** to another **_URL**\r\n\t *\r\n\t * @param {_URL} url\r\n\t * @returns boolean\r\n\t * @memberof _URL\r\n\t */\r\n    public equalTo(url: _URL): boolean {\r\n        return this.clean() == url.clean();\r\n    }\r\n\r\n\t/**\r\n\t * Compares the pathnames of two URLs to each other\r\n\t *\r\n\t * @static\r\n\t * @param {_URL} a\r\n\t * @param {_URL} b\r\n\t * @returns boolean\r\n\t * @memberof _URL\r\n\t */\r\n    static equal(a: _URL | string, b: _URL | string): boolean {\r\n        let urlA = a instanceof _URL ? a : new _URL(a);\r\n        let urlB = b instanceof _URL ? b : new _URL(b);\r\n        return urlA.equalTo(urlB);\r\n    }\r\n}\r\n\r\n/**\r\n * This is the default starting URL, to avoid needless instances of the same class that produce the same value, I defined the default value\r\n */\r\nexport const newURL = new _URL();\r\nexport const URLString = newURL.getPathname();\r\n\r\nexport type LinkEvent = MouseEvent | TouchEvent;\r\nexport type StateEvent = LinkEvent | PopStateEvent;\r\nexport type Trigger = HTMLAnchorElement | \"HistoryManager\" | \"popstate\" | \"back\" | \"forward\";\r\n\r\nexport interface ICoords {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport interface IStateData {\r\n    scroll: ICoords;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface IState {\r\n    url: _URL;\r\n    index?: number;\r\n    transition: string;\r\n    data: IStateData;\r\n}\r\n\r\n/**\r\n * A quick snapshot of page coordinates, e.g. scroll positions\r\n *\r\n * @export\r\n * @class Coords\r\n * @implements {ICoords}\r\n */\r\nexport class Coords implements ICoords {\r\n    public x: number;\r\n    public y: number;\r\n\r\n\t/**\r\n\t * Creates an instance of Coords.\r\n\t *\r\n\t * @param {number} [x=window.scrollX]\r\n\t * @param {number} [y=window.scrollY]\r\n\t * @memberof Coords\r\n\t */\r\n    constructor(x: number = window.scrollX, y: number = window.scrollY) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the current status of the page consisting of properties like: url, transition, and data\r\n *\r\n * @export\r\n * @class State\r\n */\r\nexport class State {\r\n\t/**\r\n\t * The current state data\r\n\t *\r\n\t * @private\r\n\t * @type IState\r\n\t * @memberof State\r\n\t */\r\n    private state: IState;\r\n\r\n\t/**\r\n\t * Creates an instance of State.\r\n\t * @param {IState} {\r\n     *         url = new _URL(),\r\n\t *         index = 0,\r\n\t *         transition = \"default\",\r\n\t *         data = {\r\n\t *             scroll: new StateCoords(),\r\n\t *             trigger: \"HistoryManager\"\r\n\t *         }\r\n\t *     }\r\n\t * @memberof State\r\n\t */\r\n    constructor(state: IState = {\r\n        url: new _URL(),\r\n        index: 0,\r\n        transition: \"default\",\r\n        data: {\r\n            scroll: new Coords(),\r\n            trigger: \"HistoryManager\"\r\n        }\r\n    }) {\r\n        this.state = state;\r\n    }\r\n\r\n\t/**\r\n\t * Get state index\r\n\t *\r\n\t * @returns number\r\n\t * @memberof State\r\n\t */\r\n    public getIndex(): number {\r\n        return this.state.index;\r\n    }\r\n\r\n\t/**\r\n\t * Set state index\r\n\t *\r\n\t * @param {number} index\r\n\t * @returns State\r\n\t * @memberof State\r\n\t */\r\n    public setIndex(index: number): State {\r\n        this.state.index = index;\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Get state URL\r\n\t *\r\n\t * @returns _URL\r\n\t * @memberof State\r\n\t */\r\n    public getURL(): _URL {\r\n        return this.state.url;\r\n    }\r\n\r\n\t/**\r\n\t * Get state URL as a string\r\n\t *\r\n\t * @returns string\r\n\t * @memberof State\r\n\t */\r\n    public getURLPathname(): string {\r\n        return this.state.url.getPathname();\r\n    }\r\n\r\n\t/**\r\n\t * Get state transition\r\n\t *\r\n\t * @returns string\r\n\t * @memberof State\r\n\t */\r\n    public getTransition(): string {\r\n        return this.state.transition;\r\n    }\r\n\r\n\t/**\r\n\t * Get state data\r\n\t *\r\n\t * @returns IStateData\r\n\t * @memberof State\r\n\t */\r\n    public getData(): IStateData {\r\n        return this.state.data;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the State as an Object\r\n\t *\r\n\t * @returns object\r\n\t * @memberof State\r\n\t */\r\n    public toJSON(): object {\r\n        const { url, index, transition, data }: IState = this.state;\r\n        return {\r\n            url: url.getFullPath(), index, transition, data\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * History of the site, stores only the State class\r\n *\r\n * @export\r\n * @class HistoryManager\r\n * @extends {Storage<State>}\r\n */\r\nexport class HistoryManager extends Storage<State> {\r\n\t/**\r\n\t * Creates an instance of the HistoryManager class, which inherits properties and methods from the Storage class.\r\n\t *\r\n\t * @memberof HistoryManager\r\n\t * @constructor\r\n\t */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\t/**\r\n\t * Sets the index of the state before adding to HistoryManager\r\n\t *\r\n\t * @param {State} value\r\n\t * @returns HistoryManager\r\n\t * @memberof HistoryManager\r\n\t */\r\n    public add(value: State): HistoryManager {\r\n        let state = value;\r\n        let index = this.size();\r\n        super.add(state);\r\n        state.setIndex(index);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Quick way to add a State to the HistoryManager\r\n\t *\r\n\t * @param {IState} value\r\n\t * @returns HistoryManager\r\n\t * @memberof HistoryManager\r\n\t */\r\n    public addState(value: IState | State): HistoryManager {\r\n        let state = value instanceof State ? value : new State(value);\r\n        this.add(state);\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * Controls specific kinds of actions that require JS\r\n *\r\n * @export\r\n * @class Service\r\n */\r\nexport class Service extends ManagerItem {\r\n\t/**\r\n\t * Stores access to the App class's EventEmitter\r\n\t *\r\n\t * @protected\r\n\t * @type EventEmitter\r\n\t * @memberof Service\r\n\t */\r\n    protected EventEmitter: EventEmitter;\r\n\r\n\t/**\r\n\t * Stores access to the App class's PageManager\r\n\t *\r\n\t * @protected\r\n\t * @type PageManager\r\n\t * @memberof Service\r\n\t */\r\n    protected PageManager: PageManager;\r\n\r\n\t/**\r\n\t * Stores access to the App class's HistoryManager\r\n\t *\r\n\t * @protected\r\n\t * @type HistoryManager\r\n\t * @memberof Service\r\n\t */\r\n    protected HistoryManager: HistoryManager;\r\n\r\n\t/**\r\n\t * Stores the ServiceManager the service is install on\r\n\t *\r\n\t * @protected\r\n\t * @type ServiceManager\r\n\t * @memberof Service\r\n\t */\r\n    protected ServiceManager: ServiceManager;\r\n\r\n\t/**\r\n\t * Stores access to the App's TransitionManager\r\n\t *\r\n\t * @protected\r\n\t * @type TransitionManager\r\n\t * @memberof Service\r\n\t */\r\n    protected TransitionManager: TransitionManager;\r\n\r\n\t/**\r\n\t * Method is run once when Service is installed on a ServiceManager\r\n     *\r\n\t * @memberof Service\r\n\t */\r\n    public install(): void {\r\n        let app = this.manager.getApp();\r\n        this.PageManager = app.getPages();\r\n        this.EventEmitter = app.getEmitter();\r\n        this.HistoryManager = app.getHistory();\r\n        this.ServiceManager = app.getServices();\r\n        this.TransitionManager = app.getTransitions();\r\n    }\r\n\r\n    // Called on start of Service\r\n    public boot(): void { }\r\n\r\n    // Initialize events\r\n    public initEvents(): void { }\r\n\r\n    // Stop events\r\n    public stopEvents(): void { }\r\n\r\n    // Stop services\r\n    public stop(): void {\r\n        this.stopEvents();\r\n    }\r\n}\r\n\r\n/**\r\n * The Service Manager controls the lifecycle of all services in an App\r\n *\r\n * @export\r\n * @class ServiceManager\r\n * @extends {AdvancedStorage<Service>}\r\n */\r\nexport class ServiceManager extends AdvancedStorage<Service> {\r\n    /**\r\n     * Creates an instance of ServiceManager.\r\n     *\r\n     * @param {App} app\r\n     * @memberof ServiceManager\r\n     */\r\n    constructor(app: App) {\r\n        super(app);\r\n    }\r\n\r\n\t/**\r\n\t * Call the boot method for all Services\r\n\t *\r\n\t * @returns Promise<void>\r\n\t * @memberof ServiceManager\r\n\t */\r\n    public async boot(): Promise<void> {\r\n        await this.asyncMethodCall(\"boot\");\r\n    }\r\n\r\n\t/**\r\n\t * Call the initEvents method for all Services\r\n\t *\r\n\t * @returns ServiceManager\r\n\t * @memberof ServiceManager\r\n\t */\r\n    public initEvents(): ServiceManager {\r\n        this.methodCall(\"initEvents\");\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Call the stopEvents method for all Services\r\n\t *\r\n\t * @returns ServiceManager\r\n\t * @memberof ServiceManager\r\n\t */\r\n    public stopEvents(): ServiceManager {\r\n        this.methodCall(\"stopEvents\");\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Call the stop method for all Services\r\n\t *\r\n\t * @returns ServiceManager\r\n\t * @memberof ServiceManager\r\n\t */\r\n    public stop(): ServiceManager {\r\n        this.methodCall(\"stop\");\r\n        return this;\r\n    }\r\n}\r\n\r\nexport type ListenerCallback = (...args: any) => void;\r\nexport interface IListener {\r\n    readonly callback: ListenerCallback;\r\n    readonly scope: object;\r\n    readonly name: string;\r\n}\r\n\r\n/**\r\n * Represents a new event listener consisting of properties like: callback, scope, name\r\n *\r\n * @export\r\n * @class Listener\r\n */\r\nexport class Listener {\r\n\t/**\r\n\t * The current listener data\r\n\t *\r\n\t * @private\r\n\t * @type IListener\r\n\t * @memberof Listener\r\n\t */\r\n    private listener: IListener;\r\n\r\n\t/**\r\n\t * Creates an instance of Listener.\r\n\t *\r\n\t * @param {IListener} { callback = () => { }, scope = null, name = \"event\" }\r\n\t * @memberof Listener\r\n\t */\r\n    constructor({\r\n        callback = () => { },\r\n        scope = null,\r\n        name = \"event\",\r\n    }: IListener) {\r\n        this.listener = { callback, scope, name };\r\n    }\r\n\r\n\t/**\r\n\t * Returns the callback Function of the Listener\r\n\t *\r\n\t * @returns ListenerCallback\r\n\t * @memberof Listener\r\n\t */\r\n    public getCallback(): ListenerCallback {\r\n        return this.listener.callback;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the scope as an Object, from the Listener\r\n\t *\r\n\t * @returns object\r\n\t * @memberof Listener\r\n\t */\r\n    public getScope(): object {\r\n        return this.listener.scope;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the event as a String, from the Listener\r\n\t *\r\n\t * @returns string\r\n\t * @memberof Listener\r\n\t */\r\n    public getEventName(): string {\r\n        return this.listener.name;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the listener as an Object\r\n\t *\r\n\t * @returns IListener\r\n\t * @memberof Listener\r\n\t */\r\n    public toJSON(): IListener {\r\n        return this.listener;\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a new event listener consisting of properties like: callback, scope, name\r\n *\r\n * @export\r\n * @class Event\r\n * @extends {Storage<Listener>}\r\n */\r\nexport class Event extends Storage<Listener> {\r\n\t/**\r\n\t * The name of the event\r\n\t *\r\n\t * @private\r\n\t * @type string\r\n\t * @memberof Event\r\n\t */\r\n    private name: string;\r\n\r\n\t/**\r\n\t * Creates an instance of Event.\r\n\t *\r\n\t * @param {string} [name=\"event\"]\r\n\t * @memberof Event\r\n\t */\r\n    constructor(name: string = \"event\") {\r\n        super();\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport type EventInput = string | object | Array<string>;\r\n\r\n/**\r\n * An event emitter\r\n *\r\n * @export\r\n * @class EventEmitter\r\n * @extends {Manager<string, Event>}\r\n */\r\nexport class EventEmitter extends Manager<string, Event> {\r\n\t/**\r\n\t * Creates an instance of EventEmitter.\r\n\t *\r\n\t * @memberof EventEmitter\r\n\t */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n\t * Gets events, if event doesn't exist create a new Event\r\n     *\r\n     * @param {string} name\r\n     * @returns Event\r\n     * @memberof EventEmitter\r\n     */\r\n    public getEvent(name: string): Event {\r\n        let event = this.get(name);\r\n        if (!(event instanceof Event)) {\r\n            this.set(name, new Event(name));\r\n            return this.get(name);\r\n        }\r\n\r\n        return event;\r\n    }\r\n\t/**\r\n\t * Creates a new listener and adds it to the event\r\n\t *\r\n\t * @param {string} name\r\n\t * @param {ListenerCallback} callback\r\n\t * @param {object} scope\r\n\t * @returns Event\r\n\t * @memberof EventEmitter\r\n\t */\r\n    public newListener(\r\n        name: string,\r\n        callback: ListenerCallback,\r\n        scope: object\r\n    ): Event {\r\n        let event = this.getEvent(name);\r\n        event.add(new Listener({ name, callback, scope }));\r\n        return event;\r\n    }\r\n\r\n\t/**\r\n\t * Adds a listener for a given event\r\n\t *\r\n\t * @param {EventInput} events\r\n\t * @param {ListenerCallback} callback\r\n\t * @param {object} scope\r\n\t * @returns\r\n\t * @memberof EventEmitter\r\n\t */\r\n    public on(\r\n        events: EventInput,\r\n        callback?: ListenerCallback,\r\n        scope?: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.split(/\\s/g);\r\n\r\n        let _name: string;\r\n        let _callback: ListenerCallback;\r\n        let _scope: object;\r\n\r\n        // Loop through the list of events\r\n        Object.keys(events).forEach(key => {\r\n            // Select the name of the event from the list\r\n            // Remember events can be {String | Object | Array<string>}\r\n\r\n            // Check If events is an Object (JSON like Object, and not an Array)\r\n            if (typeof events == \"object\" && !Array.isArray(events)) {\r\n                _name = key;\r\n                _callback = events[key];\r\n                _scope = callback;\r\n            } else {\r\n                _name = events[key];\r\n                _callback = callback;\r\n                _scope = scope;\r\n            }\r\n\r\n            this.newListener(_name, _callback, _scope);\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Removes a listener from an event\r\n\t *\r\n\t * @param {string} name\r\n\t * @param {ListenerCallback} [callback]\r\n\t * @param {object} [scope]\r\n\t * @returns Event\r\n\t * @memberof EventEmitter\r\n\t */\r\n    public removeListener(\r\n        name: string,\r\n        callback: ListenerCallback,\r\n        scope: object\r\n    ): Event {\r\n        let event: Event = this.getEvent(name);\r\n\r\n        if (callback) {\r\n            let i = 0,\r\n                len: number = event.size(),\r\n                value: Listener;\r\n            let listener = new Listener({ name, callback, scope });\r\n            for (; i < len; i++) {\r\n                value = event.get(i);\r\n                console.log(value);\r\n                if (\r\n                    value.getCallback() === listener.getCallback() &&\r\n                    value.getScope() === listener.getScope()\r\n                )\r\n                    break;\r\n            }\r\n\r\n            event.remove(i);\r\n        }\r\n        return event;\r\n    }\r\n\r\n\t/**\r\n\t * Removes a listener from a given event, or it just completely removes an event\r\n\t *\r\n\t * @param {EventInput} events\r\n\t * @param {ListenerCallback} [callback]\r\n\t * @param {object} [scope]\r\n\t * @returns EventEmitter\r\n\t * @memberof EventEmitter\r\n\t */\r\n    public off(\r\n        events: EventInput,\r\n        callback?: ListenerCallback,\r\n        scope?: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.split(/\\s/g);\r\n\r\n        let _name: string;\r\n        let _callback: ListenerCallback;\r\n        let _scope: object;\r\n\r\n        // Loop through the list of events\r\n        Object.keys(events).forEach((key) => {\r\n            // Select the name of the event from the list\r\n            // Remember events can be {String | Object | Array<any>}\r\n\r\n            // Check If events is an Object (JSON like Object, and not an Array)\r\n            if (typeof events == \"object\" && !Array.isArray(events)) {\r\n                _name = key;\r\n                _callback = events[key];\r\n                _scope = callback;\r\n            } else {\r\n                _name = events[key];\r\n                _callback = callback;\r\n                _scope = scope;\r\n            }\r\n\r\n            if (_callback) {\r\n                this.removeListener(_name, _callback, _scope);\r\n            } else this.remove(_name);\r\n        }, this);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Adds a one time event listener for an event\r\n\t *\r\n\t * @param {EventInput} events\r\n\t * @param {ListenerCallback} callback\r\n\t * @param {object} scope\r\n\t * @returns EventEmitter\r\n\t * @memberof EventEmitter\r\n\t */\r\n    public once(\r\n        events: EventInput,\r\n        callback: ListenerCallback,\r\n        scope: object\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.split(/\\s/g);\r\n\r\n        let onceFn: ListenerCallback = (...args) => {\r\n            this.off(events, onceFn, scope);\r\n            callback.apply(scope, args);\r\n        };\r\n\r\n        this.on(events, onceFn, scope);\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Call all listeners within an event\r\n\t *\r\n\t * @param {(string | Array<any>)} events\r\n     * @param {...any} args\r\n\t * @returns EventEmitter\r\n\t * @memberof EventEmitter\r\n\t */\r\n    public emit(\r\n        events: string | Array<any>,\r\n        ...args: any\r\n    ): EventEmitter {\r\n        // If there is no event break\r\n        if (typeof events == \"undefined\") return this;\r\n\r\n        // Create a new event every space\r\n        if (typeof events == \"string\") events = events.split(/\\s/g);\r\n\r\n        // Loop through the list of events\r\n        events.forEach((event: string) => {\r\n            let listeners: Event = this.getEvent(event);\r\n\r\n            const customEvent: CustomEvent<any> = new CustomEvent(event, { detail: args })\r\n            window.dispatchEvent(customEvent);\r\n\r\n            listeners.forEach((listener: Listener) => {\r\n                let { callback, scope }: IListener = listener.toJSON();\r\n                callback.apply(scope, args);\r\n            });\r\n        }, this);\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * Parses strings to DOM\r\n */\r\nexport const PARSER: DOMParser = new DOMParser();\r\n\r\n/**\r\n * A page represents the DOM elements that create each page\r\n *\r\n * @export\r\n * @class Page\r\n */\r\nexport class Page extends ManagerItem {\r\n\t/**\r\n\t * Holds the DOM of the current page\r\n\t *\r\n\t * @private\r\n\t * @type Document\r\n\t * @memberof Page\r\n\t */\r\n    private dom: Document;\r\n\r\n\t/**\r\n\t * Holds the wrapper element to be swapped out of each Page\r\n\t *\r\n\t * @private\r\n\t * @type HTMLElement\r\n\t * @memberof Page\r\n\t */\r\n    private wrapper: HTMLElement;\r\n\r\n\t/**\r\n\t * Holds the title of each page\r\n\t *\r\n\t * @private\r\n\t * @type string\r\n\t * @memberof Page\r\n\t */\r\n    private title: string;\r\n\r\n\t/**\r\n\t * Holds the head element of each page\r\n\t *\r\n\t * @private\r\n\t * @type Element\r\n\t * @memberof Page\r\n\t */\r\n    private head: Element;\r\n\r\n\t/**\r\n\t * Holds the body element of each page\r\n\t *\r\n\t * @private\r\n\t * @type Element\r\n\t * @memberof Page\r\n\t */\r\n    private body: Element;\r\n\r\n\t/**\r\n\t * The URL of the current page\r\n\t *\r\n\t * @private\r\n\t * @type _URL\r\n\t * @memberof Page\r\n\t */\r\n    private url: _URL;\r\n\r\n\t/**\r\n\t * Creates an instance of Page, it also creates a new page from response text, or a Document Object\r\n\t *\r\n\t * @param {_URL} [url=new _URL()]\r\n\t * @param {(string | Document)} [dom=document]\r\n\t * @memberof Page\r\n\t */\r\n    constructor(url: _URL = new _URL(), dom: string | Document = document) {\r\n        super();\r\n        this.url = url;\r\n        if (typeof dom === \"string\") {\r\n            this.dom = PARSER.parseFromString(dom, \"text/html\");\r\n        } else this.dom = dom || document;\r\n\r\n        const { title, head, body } = this.dom;\r\n        this.title = title;\r\n        this.head = head;\r\n        this.body = body;\r\n    }\r\n\r\n    /**\r\n     * Runs once the the manager and config have been registered\r\n     *\r\n     * @returns void\r\n     * @memberof Page\r\n     */\r\n    public install(): void {\r\n        this.wrapper = this.body.querySelector(this.getConfig(\"wrapperAttr\"));\r\n    }\r\n\r\n\t/**\r\n\t * Returns the current page's URL\r\n\t *\r\n\t * @returns _URL\r\n\t * @memberof Page\r\n\t */\r\n    public getURL(): _URL {\r\n        return this.url;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the current page's URL\r\n\t *\r\n\t * @returns string\r\n\t * @memberof Page\r\n\t */\r\n    public getPathname(): string {\r\n        return this.url.pathname;\r\n    }\r\n\r\n\t/**\r\n\t * The page title\r\n\t *\r\n\t * @returns string\r\n\t * @memberof Page\r\n\t */\r\n    public getTitle(): string {\r\n        return this.title;\r\n    }\r\n\r\n\t/**\r\n\t * The page's head element\r\n\t *\r\n\t * @returns Element\r\n\t * @memberof Page\r\n\t */\r\n    public getHead(): Element {\r\n        return this.head;\r\n    }\r\n\r\n\t/**\r\n\t * The page's body element\r\n\t *\r\n\t * @returns Element\r\n\t * @memberof Page\r\n\t */\r\n    public getBody(): Element {\r\n        return this.body;\r\n    }\r\n\r\n\t/**\r\n\t * The page's wrapper element\r\n\t *\r\n\t * @returns HTMLElement\r\n\t * @memberof Page\r\n\t */\r\n    public getWrapper(): HTMLElement {\r\n        return this.wrapper;\r\n    }\r\n\r\n\t/**\r\n\t * The page's document\r\n\t *\r\n\t * @returns Document\r\n\t * @memberof Page\r\n\t */\r\n    public getDOM(): Document {\r\n        return this.dom;\r\n    }\r\n}\r\n\r\n/**\r\n * Controls which page to be load\r\n *\r\n * @export\r\n * @class PageManager\r\n * @extends {AdvancedManager<string, Page>}\r\n */\r\nexport class PageManager extends AdvancedManager<string, Page> {\r\n    /**\r\n     * Stores all URL's that are currently loading\r\n     *\r\n     * @protected\r\n     * @type Manager<string, Promise<string>>\r\n     * @memberof PageManager\r\n     */\r\n    protected loading: Manager<string, Promise<string>> = new Manager();\r\n\r\n\t/**\r\n\t * Creates an instance of the PageManager\r\n\t *\r\n     * @param {App} app\r\n\t * @memberof PageManager\r\n\t */\r\n    constructor(app: App) {\r\n        super(app);\r\n        this.set(URLString, new Page());\r\n    }\r\n\r\n    /**\r\n     * Returns the loading Manager\r\n     *\r\n     * @returns Manager<string, Promise<string>>\r\n     * @memberof PageManager\r\n     */\r\n    public getLoading(): Manager<string, Promise<string>> {\r\n        return this.loading;\r\n    }\r\n\r\n    /**\r\n     * Load from cache or by requesting URL via a fetch request, avoid reqesting for the same thing twice by storing the fetch request in \"this.loading\"\r\n     *\r\n     * @param {(_URL | string)} [_url=new _URL()]\r\n     * @returns Promise<Page>\r\n     * @memberof PageManager\r\n     */\r\n    public async load(_url: _URL | string = new _URL()): Promise<Page> {\r\n        let url: _URL = _url instanceof URL ? _url : new _URL(_url);\r\n        let urlString: string = url.getPathname();\r\n        let page: Page, request: Promise<string>;\r\n        if (this.has(urlString)) {\r\n            page = this.get(urlString);\r\n            return Promise.resolve(page);\r\n        }\r\n\r\n        if (!this.loading.has(urlString)) {\r\n            request = this.request(urlString);\r\n            this.loading.set(urlString, request);\r\n        } else request = this.loading.get(urlString);\r\n\r\n        let response = await request;\r\n        this.loading.remove(urlString);\r\n\r\n        page = new Page(url, response);\r\n        this.set(urlString, page);\r\n        return page;\r\n    }\r\n\r\n    /**\r\n     * Starts a fetch request\r\n     *\r\n     * @param {string} url\r\n     * @returns Promise<string>\r\n     * @memberof PageManager\r\n     */\r\n    public async request(url: string): Promise<string> {\r\n        const headers = new Headers(this.getConfig(\"headers\"));\r\n        const timeout = window.setTimeout(() => {\r\n            window.clearTimeout(timeout);\r\n            throw \"Request Timed Out!\";\r\n        }, this.getConfig(\"timeout\"));\r\n\r\n        try {\r\n            let response = await fetch(url, {\r\n                mode: 'same-origin',\r\n                method: \"GET\",\r\n                headers: headers,\r\n                cache: \"default\",\r\n                credentials: \"same-origin\",\r\n            });\r\n\r\n            window.clearTimeout(timeout);\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return await response.text();\r\n            }\r\n\r\n            const err = new Error(response.statusText || \"\" + response.status);\r\n            throw err;\r\n        } catch (err) {\r\n            window.clearTimeout(timeout);\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * The async function type, allows for smooth transition between Promises\r\n */\r\nexport type asyncFn = (err?: any, value?: any) => void;\r\nexport interface ITransition {\r\n    oldPage: Page,\r\n    newPage: Page,\r\n    trigger: Trigger\r\n}\r\nexport interface ITransitionData {\r\n    from?: Page,\r\n    to?: Page,\r\n    trigger?: Trigger,\r\n    done: asyncFn\r\n}\r\n\r\n/**\r\n * Controls the animation between pages\r\n *\r\n * @export\r\n * @class Transition\r\n */\r\nexport class Transition extends ManagerItem {\r\n\t/**\r\n\t * Transition name\r\n\t *\r\n\t * @protected\r\n\t * @type string\r\n\t * @memberof Transition\r\n\t */\r\n    protected name: string = \"Transition\";\r\n\r\n\t/**\r\n\t * The page to transtion from\r\n\t *\r\n\t * @protected\r\n\t * @type Page\r\n\t * @memberof Transition\r\n\t */\r\n    protected oldPage: Page;\r\n\r\n\t/**\r\n\t * Page to transition to\r\n\t *\r\n\t * @protected\r\n\t * @type Page\r\n\t * @memberof Transition\r\n\t */\r\n    protected newPage: Page;\r\n\r\n\t/**\r\n\t * What triggered the transition to occur\r\n\t *\r\n\t * @protected\r\n\t * @type Trigger\r\n\t * @memberof Transition\r\n\t */\r\n    protected trigger: Trigger;\r\n\r\n    /**\r\n     * Creates an instance of Transition.\r\n     *\r\n     * @memberof Transition\r\n     */\r\n    constructor() { super(); }\r\n\r\n\t/**\r\n\t * Initialize the transition\r\n\t *\r\n\t * @param {ITransition} {\r\n\t * \t\toldPage,\r\n\t * \t\tnewPage,\r\n\t * \t\ttrigger\r\n\t * \t}\r\n     * @returns Transition\r\n\t * @memberof Transition\r\n\t */\r\n    public init({\r\n        oldPage,\r\n        newPage,\r\n        trigger\r\n    }: ITransition): Transition {\r\n        this.oldPage = oldPage;\r\n        this.newPage = newPage;\r\n        this.trigger = trigger;\r\n        this.boot();\r\n        return this;\r\n    }\r\n\r\n    // Called on start of Transition\r\n    public boot(): void { }\r\n\r\n    // Initialize events\r\n    public initEvents(): void { }\r\n\r\n    // Stop events\r\n    public stopEvents(): void { }\r\n\r\n    // Stop services\r\n    public stop(): void {\r\n        this.stopEvents();\r\n    }\r\n\r\n\t/**\r\n\t * Returns the Transition's name\r\n\t *\r\n\t * @returns string\r\n\t * @memberof Transition\r\n\t */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the Transition's old page\r\n\t *\r\n\t * @returns Page\r\n\t * @memberof Transition\r\n\t */\r\n    public getOldPage(): Page {\r\n        return this.oldPage;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the Transition's new page\r\n\t *\r\n\t * @returns Page\r\n\t * @memberof Transition\r\n\t */\r\n    public getNewPage(): Page {\r\n        return this.newPage;\r\n    }\r\n\r\n\t/**\r\n\t * Returns the Transition's trigger\r\n\t *\r\n\t * @returns Trigger\r\n\t * @memberof Transition\r\n\t */\r\n    public getTrigger(): Trigger {\r\n        return this.trigger;\r\n    }\r\n\r\n    // Based off the highwayjs Transition class\r\n\t/**\r\n\t * Transition from current page\r\n\t *\r\n\t * @param {ITransitionData} { from, trigger, done }\r\n\t * @memberof Transition\r\n\t */\r\n    public out({ done }: ITransitionData): any {\r\n        done();\r\n    }\r\n\r\n\t/**\r\n\t * Transition into the next page\r\n\t *\r\n\t * @param {ITransitionData} { from, to, trigger, done }\r\n\t * @memberof Transition\r\n\t */\r\n    public in({ done }: ITransitionData): any {\r\n        done();\r\n    }\r\n\r\n    /**\r\n     * Starts the transition\r\n     *\r\n     * @returns Promise<Transition>\r\n     * @memberof Transition\r\n     */\r\n    public async start(EventEmiiter: EventEmitter): Promise<Transition> {\r\n        let fromWrapper = this.oldPage.getWrapper();\r\n        let toWrapper = this.newPage.getWrapper();\r\n        document.title = this.newPage.getTitle();\r\n\r\n        return new Promise(async finish => {\r\n            EventEmiiter.emit(\"BEFORE_TRANSITION_OUT\");\r\n            await new Promise(done => {\r\n                let outMethod: Promise<any> = this.out({\r\n                    from: this.oldPage,\r\n                    trigger: this.trigger,\r\n                    done\r\n                });\r\n\r\n                if (outMethod instanceof Promise)\r\n                    outMethod.then(done);\r\n            });\r\n\r\n            EventEmiiter.emit(\"AFTER_TRANSITION_OUT\");\r\n\r\n            await new Promise(done => {\r\n                fromWrapper.insertAdjacentElement('beforebegin', toWrapper);\r\n                fromWrapper.remove();\r\n                done();\r\n            });\r\n\r\n            EventEmiiter.emit(\"BEFORE_TRANSITION_IN\");\r\n\r\n            await new Promise(done => {\r\n                let inMethod: Promise<any> = this.in({\r\n                    from: this.oldPage,\r\n                    to: this.newPage,\r\n                    trigger: this.trigger,\r\n                    done\r\n                });\r\n\r\n                if (inMethod instanceof Promise)\r\n                    inMethod.then(done);\r\n            });\r\n\r\n            EventEmiiter.emit(\"AFTER_TRANSITION_IN\");\r\n            finish();\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Controls which animation between pages to use\r\n *\r\n * @export\r\n * @class TransitionManager\r\n * @extends {AdvancedManager<string, Transition>}\r\n */\r\nexport class TransitionManager extends AdvancedManager<string, Transition> {\r\n\t/**\r\n\t * Creates an instance of the TransitionManager\r\n\t *\r\n     * @param {App} app\r\n\t * @memberof TransitionManager\r\n\t */\r\n    constructor(app: App) { super(app); }\r\n\r\n\t/**\r\n\t * Quick way to add a Transition to the TransitionManager\r\n\t *\r\n\t * @param {Transition} value\r\n\t * @returns TransitionManager\r\n\t * @memberof TransitionManager\r\n\t */\r\n    public add(value: Transition): TransitionManager {\r\n        let name = value.getName();\r\n        this.set(name, value);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Runs a transition\r\n     *\r\n     * @param {{ name: string, oldPage: Page, newPage: Page, trigger: Trigger }} { name, oldPage, newPage, trigger }\r\n     * @returns Promise<void>\r\n     * @memberof TransitionManager\r\n     */\r\n    public async boot({ name, oldPage, newPage, trigger }: { name: string, oldPage: Page, newPage: Page, trigger: Trigger }): Promise<Transition> {\r\n        let transition: Transition = this.get(name);\r\n        transition.init({\r\n            oldPage,\r\n            newPage,\r\n            trigger\r\n        });\r\n\r\n        let EventEmitter = this.getApp().getEmitter();\r\n        return await transition.start(EventEmitter);\r\n    }\r\n\r\n\t/**\r\n\t * Call the initEvents method for all Transitions\r\n\t *\r\n\t * @returns TransitionManager\r\n\t * @memberof TransitionManager\r\n\t */\r\n    public initEvents(): TransitionManager {\r\n        this.methodCall(\"initEvents\");\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Call the stopEvents method for all Transitions\r\n\t *\r\n\t * @returns TransitionManager\r\n\t * @memberof TransitionManager\r\n\t */\r\n    public stopEvents(): TransitionManager {\r\n        this.methodCall(\"stopEvents\");\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * Services that interact with specific Components to achieve certain actions\r\n *\r\n * @export\r\n * @class Block\r\n * @extends {Service}\r\n */\r\nexport class Block extends Service {\r\n    /**\r\n     * The name of the Block\r\n     *\r\n     * @protected\r\n     * @type string\r\n     * @memberof Block\r\n     */\r\n    protected name: string;\r\n\r\n    /**\r\n     * Query selector string \r\n     *\r\n     * @protected\r\n     * @type string\r\n     * @memberof Block\r\n     */\r\n    protected selector: string;\r\n\r\n    /**\r\n     * Index of Block in a BlockManager \r\n     *\r\n     * @protected\r\n     * @type number\r\n     * @memberof Block\r\n     */\r\n    protected index: number;\r\n\r\n    /**\r\n     * The Root Element of a Block\r\n     *\r\n     * @protected\r\n     * @type HTMLElement\r\n     * @memberof Block\r\n     */\r\n    protected rootElement: HTMLElement;\r\n\r\n    /**\r\n     * It initializes the Block\r\n     *\r\n     * @param {string} [name]\r\n     * @param {HTMLElement} [rootElement]\r\n     * @param {string} [selector]\r\n     * @param {number} [index]\r\n     * @memberof Block\r\n     */\r\n    public init(name?: string, rootElement?: HTMLElement, selector?: string, index?: number) {\r\n        this.rootElement = rootElement;\r\n        this.name = name;\r\n        this.selector = selector;\r\n        this.index = index;\r\n    }\r\n\r\n    /**\r\n     * Get Root Element\r\n     *\r\n     * @returns HTMLElement\r\n     * @memberof Block\r\n     */\r\n    public getRootElement(): HTMLElement {\r\n        return this.rootElement;\r\n    }\r\n\r\n    /**\r\n     * Get Selector\r\n     *\r\n     * @returns string\r\n     * @memberof Block\r\n     */\r\n    public getSelector(): string {\r\n        return this.selector;\r\n    }\r\n\r\n    /**\r\n     * Get Index\r\n     *\r\n     * @returns number\r\n     * @memberof Block\r\n     */\r\n    public getIndex(): number {\r\n        return this.index;\r\n    }\r\n\r\n    /**\r\n     * Get the name of the Block\r\n     *\r\n     * @returns string\r\n     * @memberof Block\r\n     */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a new Block Intent Class\r\n *\r\n * @export\r\n * @class BlockIntent\r\n * @extends {ManagerItem}\r\n */\r\nexport class BlockIntent extends ManagerItem {\r\n    /**\r\n     * The name of the Block\r\n     *\r\n     * @protected\r\n     * @type string\r\n     * @memberof BlockIntent\r\n     */\r\n    protected name: string;\r\n\r\n    /**\r\n     * The Block Class\r\n     *\r\n     * @protected\r\n     * @type {typeof Block}\r\n     * @memberof BlockIntent\r\n     */\r\n    protected block: typeof Block;\r\n\r\n    /**\r\n     * Creates an instance of BlockIntent.\r\n     *\r\n     * @param {string} name\r\n     * @param {typeof Block} block\r\n     * @memberof BlockIntent\r\n     */\r\n    constructor(name: string, block: typeof Block) {\r\n        super();\r\n        this.name = name;\r\n        this.block = block;\r\n    }\r\n\r\n    /**\r\n     * Getter for name of Block Intent\r\n     *\r\n     * @returns string\r\n     * @memberof BlockIntent\r\n     */\r\n    public getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    /**\r\n     * Getter for the Block of the Block Intent\r\n     *\r\n     * @returns {typeof Block}\r\n     * @memberof BlockIntent\r\n     */\r\n    public getBlock(): typeof Block {\r\n        return this.block;\r\n    }\r\n}\r\n\r\n/**\r\n * A Service Manager designed to handle only Block Services, it refreshes on Page Change\r\n *\r\n * @export\r\n * @class BlockManager\r\n * @extends {ServiceManager}\r\n */\r\nexport class BlockManager extends AdvancedStorage<BlockIntent> {\r\n    /**\r\n     * A list of Active Blocks \r\n     *\r\n     * @protected\r\n     * @type {AdvancedStorage<Block>}\r\n     * @memberof BlockManager\r\n     */\r\n    protected activeBlocks: AdvancedStorage<Block>;\r\n\r\n    /**\r\n     * Creates an instance of BlockManager.\r\n     *\r\n     * @param {App} app\r\n     * @memberof BlockManager\r\n     */\r\n    constructor(app: App) {\r\n        super(app);\r\n        this.activeBlocks = new AdvancedStorage(app);\r\n    }\r\n\r\n\t/**\r\n\t * Initialize all Blocks\r\n\t *\r\n\t * @memberof BlockManager\r\n\t */\r\n    public init() {\r\n        this.forEach((intent: BlockIntent) => {\r\n            let name: string = intent.getName();\r\n            let block: typeof Block = intent.getBlock();\r\n            let selector: string = `[${this.getConfig(\"blockAttr\", false)}=\"${name}\"]`;\r\n            let rootElements: Node[] = [...document.querySelectorAll(selector)];\r\n\r\n            for (let i = 0, len = rootElements.length; i < len; i++) {\r\n                let newInstance: Block = new block();\r\n                newInstance.init(name, rootElements[i] as HTMLElement, selector, i);\r\n                this.activeBlocks.set(i, newInstance);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Getter for activeBlocks in BlockManager\r\n     *\r\n     * @returns\r\n     * @memberof BlockManager\r\n     */\r\n    public getActiveBlocks() {\r\n        return this.activeBlocks;\r\n    }\r\n\r\n\t/**\r\n\t * Call the boot method for all Blocks\r\n\t *\r\n\t * @returns Promise<void>\r\n\t * @memberof BlockManager\r\n\t */\r\n    public async boot(): Promise<void> {\r\n        await this.activeBlocks.asyncMethodCall(\"boot\");\r\n    }\r\n\r\n    /**\r\n     * Refreshes DOM Elements\r\n     *\r\n     * @memberof BlockManager\r\n     */\r\n    public refresh() {\r\n        const EventEmitter = this.getApp().getEmitter();\r\n        EventEmitter.on(\"BEFORE_TRANSITION_OUT\", () => {\r\n            this.stop();\r\n        });\r\n\r\n        EventEmitter.on(\"AFTER_TRANSITION_IN\", () => {\r\n            this.init();\r\n            this.boot();\r\n            // this.activeBlocks.methodCall(\"initEvents\");\r\n        });\r\n    }\r\n\r\n\t/**\r\n\t * Call the initEvents method for all Blocks\r\n\t *\r\n\t * @returns BlockManager\r\n\t * @memberof BlockManager\r\n\t */\r\n    public initEvents(): BlockManager {\r\n        this.activeBlocks.methodCall(\"initEvents\");\r\n        this.refresh();\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Call the stopEvents method for all Blocks\r\n\t *\r\n\t * @returns BlockManager\r\n\t * @memberof BlockManager\r\n\t */\r\n    public stopEvents(): BlockManager {\r\n        this.activeBlocks.methodCall(\"stopEvents\");\r\n        return this;\r\n    }\r\n\r\n\t/**\r\n\t * Call the stop method for all Blocks\r\n\t *\r\n\t * @returns BlockManager\r\n\t * @memberof BlockManager\r\n\t */\r\n    public stop(): BlockManager {\r\n        this.activeBlocks.methodCall(\"stop\");\r\n        this.activeBlocks.clear();\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * The App class starts the entire process, it controls all managers and all services\r\n *\r\n * @export\r\n * @class App\r\n */\r\nexport class App {\r\n    /**\r\n     * A new instance of the HistoryManager\r\n     *\r\n     * @protected\r\n     * @type HistoryManager\r\n     * @memberof App\r\n     */\r\n    protected history: HistoryManager;\r\n\r\n    /**\r\n     * A new instance of the TransitionManager\r\n     *\r\n     * @protected\r\n     * @type TransitionManager\r\n     * @memberof App\r\n     */\r\n    protected transitions: TransitionManager;\r\n\r\n    /**\r\n     * A new instance of the ServiceManager\r\n     *\r\n     * @protected\r\n     * @type ServiceManager\r\n     * @memberof App\r\n     */\r\n    protected services: ServiceManager;\r\n\r\n    /**\r\n     * A new instance of the BlockManager\r\n     *\r\n     * @protected\r\n     * @type BlockManager\r\n     * @memberof App\r\n     */\r\n    protected blocks: BlockManager;\r\n\r\n    /**\r\n     * A new instance of an EventEmitter\r\n     *\r\n     * @protected\r\n     * @type EventEmitter\r\n     * @memberof App\r\n     */\r\n    protected emitter: EventEmitter;\r\n\r\n    /**\r\n     * A new instance of the PageManager\r\n     *\r\n     * @protected\r\n     * @type PageManager\r\n     * @memberof App\r\n     */\r\n    protected pages: PageManager;\r\n\r\n    /**\r\n     * The current Configuration's for the framework\r\n     *\r\n     * @protected\r\n     * @type CONFIG\r\n     * @memberof App\r\n     */\r\n    protected config: CONFIG;\r\n\r\n    /**\r\n     * Creates an instance of App.\r\n     *\r\n     * @param {(ICONFIG | CONFIG)} [config={}]\r\n     * @memberof App\r\n     */\r\n    constructor(config: object = {}) {\r\n        this.register(config);\r\n    }\r\n\r\n    /**\r\n     * For registering all managers and the configurations\r\n     *\r\n     * @param {(ICONFIG | CONFIG)} [config={}]\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public register(config: ICONFIG | CONFIG = {}): App {\r\n        this.config = config instanceof CONFIG ? config : new CONFIG(config);\r\n        this.transitions = new TransitionManager(this);\r\n        this.services = new ServiceManager(this);\r\n        this.blocks = new BlockManager(this);\r\n        this.history = new HistoryManager();\r\n        this.pages = new PageManager(this);\r\n        this.emitter = new EventEmitter();\r\n\r\n        let handler = (() => {\r\n            document.removeEventListener(\"DOMContentLoaded\", handler);\r\n            window.removeEventListener(\"load\", handler);\r\n            this.emitter.emit(\"ready\");\r\n        }).bind(this);\r\n\r\n        document.addEventListener(\"DOMContentLoaded\", handler);\r\n        window.addEventListener(\"load\", handler);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the current configurations for the framework\r\n     *\r\n     * @param {...any} args\r\n     * @returns any\r\n     * @memberof App\r\n     */\r\n    public getConfig(...args: any): any {\r\n        return this.config.getConfig(...args);\r\n    }\r\n\r\n    /**\r\n     * Return the App's EventEmitter\r\n     *\r\n     * @returns EventEmitter\r\n     * @memberof App\r\n     */\r\n    public getEmitter(): EventEmitter {\r\n        return this.emitter;\r\n    }\r\n\r\n    /**\r\n     * Returns the App's BlockManager\r\n     *\r\n     * @returns BlockManager\r\n     * @memberof App\r\n     */\r\n    public getBlocks(): BlockManager {\r\n        return this.blocks;\r\n    }\r\n\r\n    /**\r\n     * Return the App's ServiceManager\r\n     *\r\n     * @returns ServiceManager\r\n     * @memberof App\r\n     */\r\n    public getServices(): ServiceManager {\r\n        return this.services;\r\n    }\r\n\r\n    /**\r\n     * Return the App's PageManager\r\n     *\r\n     * @returns PageManager\r\n     * @memberof App\r\n     */\r\n    public getPages(): PageManager {\r\n        return this.pages;\r\n    }\r\n\r\n    /**\r\n     * Return the App's TransitionManager\r\n     *\r\n     * @returns TransitionManager\r\n     * @memberof App\r\n     */\r\n    public getTransitions(): TransitionManager {\r\n        return this.transitions;\r\n    }\r\n\r\n    /**\r\n     * Return the App's HistoryManager\r\n     *\r\n     * @returns HistoryManager\r\n     * @memberof App\r\n     */\r\n    public getHistory(): HistoryManager {\r\n        return this.history;\r\n    }\r\n\r\n    /**\r\n     * Returns a Block Intent Object from the App's instance of the BlockManager\r\n     *\r\n     * @param {number} key\r\n     * @returns IBlockIntent\r\n     * @memberof App\r\n     */\r\n    public getBlock(key: number): BlockIntent {\r\n        return this.blocks.get(key);\r\n    }\r\n\r\n    /**\r\n     * Returns an instance of a Block from the App's instance of the BlockManager\r\n     *\r\n     * @param {number} key\r\n     * @returns Block\r\n     * @memberof App\r\n     */\r\n    public getActiveBlock(key: number): Block {\r\n        return this.blocks.getActiveBlocks().get(key);\r\n    }\r\n\r\n    /**\r\n     * Returns a Service from the App's instance of the ServiceManager\r\n     *\r\n     * @param {number} key\r\n     * @returns Service\r\n     * @memberof App\r\n     */\r\n    public getService(key: number): Service {\r\n        return this.services.get(key);\r\n    }\r\n\r\n    /**\r\n     * Returns a Transition from the App's instance of the TransitionManager\r\n     *\r\n     * @param {string} key\r\n     * @returns Transition\r\n     * @memberof App\r\n     */\r\n    public getTransition(key: string): Transition {\r\n        return this.transitions.get(key);\r\n    }\r\n\r\n    /**\r\n     * Returns a State from the App's instance of the HistoryManager\r\n     *\r\n     * @param {number} key\r\n     * @returns State\r\n     * @memberof App\r\n     */\r\n    public getState(key: number): State {\r\n        return this.history.get(key);\r\n    }\r\n\r\n    /**\r\n     * Based on the type, it will return either a Transition, a Service, or a State from their respective Managers\r\n     *\r\n     * @param {(\"service\" | \"transition\" | \"state\" | \"block\" | string)} type\r\n     * @param {any} key\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public get(type: \"service\" | \"transition\" | \"state\" | \"block\" | string, key: any): App {\r\n        switch (type.toLowerCase()) {\r\n            case \"service\":\r\n                this.getService(key);\r\n                break;\r\n            case \"transition\":\r\n                this.getTransition(key);\r\n                break;\r\n            case \"state\":\r\n                this.getState(key);\r\n                break;\r\n            case \"block\":\r\n                this.getActiveBlock(key);\r\n                break;\r\n            default:\r\n                throw `Error: can't get type '${type}', it is not a recognized type. Did you spell it correctly.`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a Page\r\n     *\r\n     * @param {string} url\r\n     * @returns Promise<Page>\r\n     * @memberof App\r\n     */\r\n    public async loadPage(url: string): Promise<Page> {\r\n        return await this.pages.load(url);\r\n    }\r\n\r\n    /**\r\n     * Based on the type, it will return load a Transition, a Service, a State, or a Page from their respective Managers\r\n     *\r\n     * @param {(\"page\" | string)} type\r\n     * @param {any} key\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public async load(type: \"page\" | string, key: any): Promise<any> {\r\n        switch (type.toLowerCase()) {\r\n            case \"page\":\r\n                return await this.loadPage(key);\r\n            default:\r\n                return Promise.resolve(this.get(type, key));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a Block Intent to the App's instance of the BlockManager\r\n     *\r\n     * @param {BlockIntent} blockIntent\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public addBlock(blockIntent: BlockIntent): App {\r\n        this.blocks.add(blockIntent);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a Service to the App's instance of the ServiceManager\r\n     *\r\n     * @param {Service} service\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public addService(service: Service): App {\r\n        this.services.add(service);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a Transition to the App's instance of the TransitionManager\r\n     *\r\n     * @param {Transition} transition\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public addTransition(transition: Transition): App {\r\n        this.transitions.add(transition);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a State to the App's instance of the HistoryManager\r\n     *\r\n     * @param {(IState | State)} state\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public addState(state: IState | State): App {\r\n        this.history.addState(state);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Based on the type, it will add either a Transition, a Service, or a State to their respective Managers\r\n     *\r\n     * @param {(\"service\" | \"transition\" | \"state\")} type\r\n     * @param {any} value\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public add(type: \"service\" | \"transition\" | \"state\" | \"block\", value: any): App {\r\n        switch (type.toLowerCase()) {\r\n            case \"service\":\r\n                this.addService(value);\r\n                break;\r\n            case \"transition\":\r\n                this.addTransition(value);\r\n                break;\r\n            case \"state\":\r\n                this.addState(value);\r\n                break;\r\n            case \"block\":\r\n                this.addBlock(value);\r\n                break;\r\n            default:\r\n                throw `Error: can't add type '${type}', it is not a recognized type. Did you spell it correctly.`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Start the App and the ServiceManager\r\n     *\r\n     * @returns Promise<App>\r\n     * @memberof App\r\n     */\r\n    public async boot(): Promise<App> {\r\n        this.blocks.init();\r\n        await this.services.boot();\r\n        await this.blocks.boot();\r\n        this.services.initEvents();\r\n        this.blocks.initEvents();\r\n        this.transitions.initEvents();\r\n        return Promise.resolve(this);\r\n    }\r\n\r\n    /**\r\n     * Stop the App and the ServiceManager\r\n     *\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public stop(): App {\r\n        this.services.stop();\r\n        this.blocks.stop();\r\n        this.transitions.stopEvents();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the current page in the PageManager\r\n     *\r\n     * @returns Page\r\n     * @memberof App\r\n     */\r\n    public currentPage(): Page {\r\n        let currentState = this.history.last();\r\n        return this.pages.get(currentState.getURLPathname());\r\n    }\r\n\r\n    /**\r\n     * A shortcut to the App EventEmiiter on method\r\n     *\r\n     * @param {EventInput} events\r\n     * @param {ListenerCallback} callback\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public on(events: EventInput, callback?: ListenerCallback): App {\r\n        this.emitter.on(events, callback, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A shortcut to the App EventEmiiter off method\r\n     *\r\n     * @param {EventInput} events\r\n     * @param {ListenerCallback} callback\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public off(events: EventInput, callback?: ListenerCallback): App {\r\n        this.emitter.off(events, callback, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A shortcut to the App EventEmiiter once method\r\n     *\r\n     * @param {string} events\r\n     * @param {ListenerCallback} callback\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public once(events: string, callback: ListenerCallback): App {\r\n        this.emitter.once(events, callback, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A shortcut to the App EventEmiiter emit method\r\n     *\r\n     * @param {(string | any[])} events\r\n     * @param {...any} args\r\n     * @returns App\r\n     * @memberof App\r\n     */\r\n    public emit(events: string | any[], ...args: any): App {\r\n        this.emitter.emit(events, args);\r\n        return this;\r\n    }\r\n}\r\n"]}