{"version":3,"sources":["blocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAE9C,WAAW;AACX,MAAM,OAAO,WAAY,SAAQ,KAAK;IAAtC;;QAMc,WAAM,GAAY,KAAK,CAAC;IAgFtC,CAAC;IA9EU,IAAI;QACP,SAAS;QACT,IAAI,CAAC,eAAe,GAAG;YACnB,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,KAAK;YACjB,SAAS,EAAE,GAAG;SACjB,CAAC;QAEF,kBAAkB;QAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAoB,CAAC,OAAO,CAAC,EAAE;YAC/C,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAEzB,iBAAiB;QACjB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QAEnB,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE;YACjD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;SACpE;QAED,IAAI,IAAI,CAAC,SAAS,KAAK,MAAM,EAAE;YAC3B,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;SAClC;QAED,gBAAgB;QAChB,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;QAE1D,wCAAwC;QACxC,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAES,OAAO;QACb,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5C,CAAC;IAES,SAAS;QACf,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAES,QAAQ;QACd,IAAI,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;YACrC,EAAE,SAAS,EAAE,cAAc,IAAI,CAAC,QAAQ,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE;YAC1D,EAAE,SAAS,EAAE,gBAAgB,EAAE,OAAO,EAAE,CAAC,EAAE;SAC9C,EAAE;YACC,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,UAAU;YAChB,MAAM,EAAE,gCAAgC,CAAC,iBAAiB;SAC7D,CAAC,CAAC;QACH,+BAA+B;QAC/B,8DAA8D;QAC9D,+CAA+C;QAC/C,KAAK;IACT,CAAC;IAES,SAAS;QACf,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,GAAG,cAAc,IAAI,CAAC,QAAQ,IAAI,CAAC;QACnE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;IACzC,CAAC;IAEM,sBAAsB,CAAC,OAAO;QACjC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,KAAK,IAAI,KAAK,IAAI,OAAO,EAAE;gBACvB,IAAI,KAAK,CAAC,iBAAiB,GAAG,CAAC,EAAE;oBAC7B,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;iBACtB;qBAAM;oBACH,IAAI,CAAC,SAAS,EAAE,CAAC;iBACpB;aACJ;SACJ;IACL,CAAC;IAEM,UAAU;QACb,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;CACJ;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAgB,IAAI,WAAW,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC","file":"../blocks.js","sourcesContent":["import { Block, BlockIntent } from \"./api.js\";\r\n\r\n//== Blocks\r\nexport class InViewBlock extends Block {\r\n    protected observer: IntersectionObserver;\r\n    protected observerOptions: { root: any; rootMargin: string; threshold: number; };\r\n    protected imgs: HTMLElement[];\r\n    protected direction: string;\r\n    protected xPercent: number;\r\n    protected inView: boolean = false;\r\n\r\n    public boot() {\r\n        // Values\r\n        this.observerOptions = {\r\n            root: null,\r\n            rootMargin: '0px',\r\n            threshold: 0.1\r\n        };\r\n\r\n        // Create observer\r\n        this.observer = new IntersectionObserver(entries => {\r\n            this.onIntersectionCallback(entries);\r\n        }, this.observerOptions);\r\n\r\n        // Prepare values\r\n        this.imgs = [];\r\n        this.direction = \"right\";\r\n        this.xPercent = 30;\r\n\r\n        if (this.rootElement.hasAttribute('data-direction')) {\r\n            this.direction = this.rootElement.getAttribute('data-direction');\r\n        }\r\n\r\n        if (this.direction === 'left') {\r\n            this.xPercent = -this.xPercent;\r\n        }\r\n\r\n        // Find elements\r\n        this.imgs = [...this.rootElement.querySelectorAll('img')];\r\n\r\n        // Add block rootElement in the observer\r\n        this.observe();\r\n    }\r\n\r\n    protected observe() {\r\n        this.observer.observe(this.rootElement);\r\n    }\r\n\r\n    protected unobserve() {\r\n        this.observer.unobserve(this.rootElement);\r\n    }\r\n\r\n    protected onScreen() {\r\n        let animation = this.rootElement.animate([\r\n            { transform: `translateX(${this.xPercent}%)`, opacity: 0 },\r\n            { transform: \"translateX(0%)\", opacity: 1 },\r\n        ], {\r\n            duration: 1500,\r\n            delay: 0.15,\r\n            fill: \"forwards\",\r\n            easing: \"cubic-bezier(0.22, 1, 0.36, 1)\" // ease-out-quint\r\n        });\r\n        // animation.onfinish = () => {\r\n        //     // this.rootElement.style.transform = \"translateX(0%)\";\r\n        //     // this.rootElement.style.opacity = \"1\";\r\n        // };\r\n    }\r\n\r\n    protected offScreen() {\r\n        this.rootElement.style.transform = `translateX(${this.xPercent}%)`;\r\n        this.rootElement.style.opacity = \"0\";\r\n    }\r\n\r\n    public onIntersectionCallback(entries) {\r\n        if (!this.inView) {\r\n            for (let entry of entries) {\r\n                if (entry.intersectionRatio > 0) {\r\n                    this.onScreen();\r\n                    this.inView = true;\r\n                } else {\r\n                    this.offScreen();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public stopEvents() {\r\n        this.unobserve();\r\n    }\r\n}\r\n\r\nexport const InViewBlockIntent: BlockIntent = new BlockIntent(\"InViewBlock\", InViewBlock);"]}