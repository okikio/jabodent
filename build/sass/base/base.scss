@import "_style.scss";
@import "_layout.scss";
@import "_utilities.scss";

@mixin modifier(
    $modifiers: (
        "responsive",
    )
) {
    $selector: str-slice(#{&}, 2);
    & {
        @content;
    }

    @at-root {
        @each $modifier in $modifiers {
            @if $modifier == "responsive" {
                @each $key, $screen in $screens {
                    @media (min-width: $screen) {
                        #{$key}:#{$selector} {
                            @content;
                        }
                    }
                }
            } @else {
                .#{$modifier}:#{$modifier} #{$modifier}:#{$selector} {
                    @content;
                }
            }
        }
    }
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string + "", $search);

    @if $index {
        @return str-slice($string + "", 1, $index - 1) + $replace +
            str-replace(
                str-slice($string + "", $index + str-length($search)),
                $search,
                $replace
            );
    }

    @return $string;
}

@mixin listSet(
    $options: (
        "property": color,
        "list": $colors,
        "important": false,
        "scale": 1,
        "suffix": false,
    )
) {
    $property: map-get($options, "property");
    $list: map-get($options, "list");
    $important: map-get($options, "important") or false;
    $scale: map-get($options, "scale") or 1;
    $suffix: map-get($options, "suffix") or false;

    @if map-has-key($list, "default") {
        &#{if($suffix, "> #{$suffix}", "")} {
            $values: map-get($list, "default");
            $value: if(type-of($values) == "number", $values * $scale, $values);
            #{$property}: $value #{if($important, !important, "")};
        }
    }

    @each $key, $values in $list {
        @if $key != default {
            &-#{str-replace($key, "/", "\\\/")}#{if($suffix, "> #{$suffix}", "")} {
                // If value is a map, loop through, and create new sub-classes using it's index
                @if type-of($values) == "map" {
                    @each $index, $value in $values {
                        &-#{$index} {
                            $val: if(
                                type-of($value) == "number",
                                $value * $scale,
                                $value
                            );
                            #{$property}: $val
                                #{if($important, !important, "")};
                        }
                    }
                } @else {
                    $value: if(
                        type-of($values) == "number",
                        $values * $scale,
                        $values
                    );
                    #{$property}: $value #{if($important, !important, "")};
                }
            }
        }
    }
}

@mixin theme($property, $suffix: false) {
    @include listSet(
        (
            "property": $property,
            "list": $colors,
            "suffix": $suffix,
        )
    );
}

.bg {
    @include modifier(("responsive", "hover", "focus")) {
        @include theme(background-color);
    }
}

.color {
    @include modifier(("responsive", "hover", "focus")) {
        @include theme(color);
    }
}

.opacity {
    @include modifier(("responsive", "hover", "focus")) {
        @include listSet(
            (
                "property": opacity,
                "list": $opacity,
            )
        );
    }
}

$dirs: (
    "r": "right",
    "l": "left",
    "t": "top",
    "b": "bottom",
    "y": (
        "bottom",
        "top",
    ),
    "x": (
        "right",
        "left",
    ),
);

@mixin dirSet(
    $options: (
        "property": color,
        "list": $colors,
        "important": false,
        "scale": 1,
        "suffix": false,
        "directionsList": $dirs,
    )
) {
    $property: map-get($options, "property");
    $list: map-get($options, "list");
    $important: map-get($options, "important") or false;
    $scale: map-get($options, "scale") or 1;
    $suffix: map-get($options, "suffix") or false;
    $dirsList: map-get($options, "directionsList") or $dirs;

    @each $key, $dir in $dirsList {
        &#{$key} {
            // If value is a map, loop through, and create new sub-classes using it's index
            @if type-of($dir) == "list" {
                @each $value in $dir {
                    @include listSet(
                        (
                            "property": #{$property}-#{$value},
                            "list": $list,
                            "scale": $scale,
                            "suffix": $suffix,
                            "important": $important,
                        )
                    );
                }
            } @else {
                @include listSet(
                    (
                        "property": #{$property}-#{$dir},
                        "list": $list,
                        "scale": $scale,
                        "suffix": $suffix,
                        "important": $important,
                    )
                );
            }
        }
    }
}

.border {
    @include modifier(("responsive", "hover", "focus")) {
        @include listSet(
            (
                "property": border-width,
                "list": $borderWidth,
            )
        );

        & {
            border-color: map-get(map-get($colors, "gray"), "300");
        }

        @include theme(border-color);

        &- {
            @include dirSet(
                (
                    "property": border-width,
                    "list": $borderWidth,
                )
            );
        }

        &-solid {
            border-style: solid;
        }

        &-dashed {
            border-style: dashed;
        }

        &-dotted {
            border-style: dotted;
        }

        &-double {
            border-style: double;
        }

        &-none {
            border-style: none;
        }
    }
}

.divide {
    @include modifier(("responsive")) {
        & {
            border-color: map-get(map-get($colors, "gray"), "300");
        }

        @include theme(border-color, "* + *");

        &- {
            @include dirSet(
                (
                    "property": border-width,
                    "list": $borderWidth,
                    "suffix": "* + *",
                )
            );
        }

        &-solid > * + * {
            border-style: solid;
        }

        &-dashed > * + * {
            border-style: dashed;
        }

        &-dotted > * + * {
            border-style: dotted;
        }

        &-double > * + * {
            border-style: double;
        }

        &-none > * + * {
            border-style: none;
        }
    }
}

$radDirs: (
    "t": (
        "top-left",
        "top-right",
    ),
    "r": (
        "top-right",
        "bottom-right",
    ),
    "l": (
        "top-left",
        "bottom-left",
    ),
    "b": (
        "bottom-left",
        "bottom-right",
    ),
    "tl": "top-left",
    "tr": "top-right",
    "bl": "bottom-left",
    "br": "bottom-right",
);

.radius {
    @include modifier(("responsive")) {
        @include listSet(
            (
                "property": border-radius,
                "list": $borderRadius,
                "important": true,
            )
        );

        &- {
            @each $key, $dir in $radDirs {
                &#{$key} {
                    // If value is a map, loop through, and create new sub-classes using it's index
                    @if type-of($dir) == "list" {
                        @each $value in $dir {
                            @include listSet(
                                (
                                    "property": border-#{$value}-radius,
                                    "list": $borderRadius,
                                    "important": true,
                                )
                            );
                        }
                    } @else {
                        @include listSet(
                            (
                                "property": border-#{$dir}-radius,
                                "list": $borderRadius,
                                "important": true,
                            )
                        );
                    }
                }
            }
        }
    }
}

.cursor {
    @include modifier(("responsive")) {
        @include listSet(
            (
                "property": cursor,
                "list": $cursors,
            )
        );
    }
}

$spacingTypes: (
    "m": "margin",
    "p": "padding",
);

@each $key, $spaceType in $spacingTypes {
    .#{$key} {
        @include modifier(("responsive")) {
            &-auto {
                #{$spaceType}: auto;
            }

            @include listSet(
                (
                    "property": #{$spaceType},
                    "list": $spacing,
                )
            );
            @include dirSet(
                (
                    "property": #{$spaceType},
                    "list": $spacing,
                )
            );

            @if $spaceType == "margin" {
                &-- {
                    @include listSet(
                        (
                            "property": #{$spaceType},
                            "list": $spacing,
                            "scale": -1,
                        )
                    );
                    @include dirSet(
                        (
                            "property": #{$spaceType},
                            "list": $spacing,
                            "scale": -1,
                        )
                    );
                }
            }
        }
    }
}

.space {
    @include modifier(("responsive")) {
        @include listSet(
            (
                "property": margin,
                "list": $spacing,
                "suffix": "* + *",
            )
        );
        @include dirSet(
            (
                "property": margin,
                "list": $spacing,
                "suffix": "* + *",
            )
        );

        &-- {
            @include listSet(
                (
                    "property": margin,
                    "list": $spacing,
                    "scale": -1,
                    "suffix": "* + *",
                )
            );
            @include dirSet(
                (
                    "property": margin,
                    "list": $spacing,
                    "scale": -1,
                    "suffix": "* + *",
                )
            );
        }
    }
}

.font {
    @include modifier(("responsive")) {
        @include listSet(
            (
                "property": font-family,
                "list": $fontFamily,
            )
        );
        @include listSet(
            (
                "property": font-weight,
                "list": $fontWeight,
            )
        );

        &-italic {
            font-style: italic;
        }

        &-bold {
            font-style: bold;
        }

        &-sz {
            @include listSet(
                (
                    "property": font-size,
                    "list": $fontSize,
                )
            );
        }
    }
}

$sizeTypes: (
    "w": "width",
    "h": "height",
    "min-w": "min-width",
    "min-h": "min-height",
    "max-w": "max-width",
    "max-h": "max-height",
);

@each $key, $sizeType in $sizeTypes {
    .#{$key} {
        @include modifier(("responsive")) {
            @include listSet(
                (
                    "property": #{$sizeType},
                    "list": $sizes,
                )
            );
        }
    }
}

.flex {
    @include modifier(("responsive")) {
        @include listSet(
            (
                "property": flex,
                "list": $flex,
            )
        );

        &-grow {
            @include listSet(
                (
                    "property": flex-grow,
                    "list": $flexGrow,
                )
            );
        }

        &-shrink {
            @include listSet(
                (
                    "property": flex-shrink,
                    "list": $flexShrink,
                )
            );
        }

        &-row {
            flex-direction: row;
        }
        &-row-reverse {
            flex-direction: row-reverse;
        }
        &-col {
            flex-direction: column;
        }
        &-col-reverse {
            flex-direction: column-reverse;
        }

        &-no-wrap {
            flex-wrap: nowrap;
        }

        &-wrap {
            flex-wrap: wrap;
        }

        &-wrap-reverse {
            flex-wrap: wrap-reverse;
        }
    }
}

.items {
    @include modifier(("responsive")) {
        &-stretch {
            align-items: stretch;
        }
        &-start {
            align-items: flex-start;
        }
        &-center {
            align-items: center;
        }
        &-end {
            align-items: flex-end;
        }
        &-baseline {
            align-items: baseline;
        }
    }
}

.content {
    @include modifier(("responsive")) {
        &-start {
            align-content: flex-start;
        }
        &-center {
            align-content: center;
        }
        &-end {
            align-content: flex-end;
        }
        &-between {
            align-content: space-between;
        }
        &-around {
            align-content: space-around;
        }
    }
}

.self {
    @include modifier(("responsive")) {
        &-auto {
            align-self: auto;
        }
        &-start {
            align-self: flex-start;
        }
        &-center {
            align-self: center;
        }
        &-end {
            align-self: flex-end;
        }
        &-stretch {
            align-self: stretch;
        }
    }
}

.float {
    @include modifier(("responsive")) {
        &-right {
            float: right;
        }
        &-left {
            float: left;
        }
        &-none {
            float: none;
        }
    }
}

.justify {
    @include modifier(("responsive")) {
        &-start {
            justify-content: flex-start;
        }
        &-center {
            justify-content: center;
        }
        &-end {
            justify-content: flex-end;
        }
        &-between {
            justify-content: space-between;
        }
        &-around {
            justify-content: space-around;
        }
    }
}

.clearfix::after {
    content: "";
    display: table;
    clear: both;
}

.object {
    @include modifier(("responsive")) {
        &-contain {
            object-fit: contain;
        }

        &-cover {
            object-fit: cover;
        }

        &-fill {
            object-fit: fill;
        }

        &-none {
            object-fit: none;
        }

        &-scale-down {
            object-fit: scale-down;
        }

        &-bottom {
            object-position: bottom;
        }
        &-center {
            object-position: center;
        }
        &-left {
            object-position: left;
        }
        &-left-bottom {
            object-position: left bottom;
        }
        &-left-top {
            object-position: left top;
        }
        &-right {
            object-position: right;
        }
        &-right-bottom {
            object-position: right bottom;
        }
        &-right-top {
            object-position: right top;
        }
        &-top {
            object-position: top;
        }
    }
}

.overflow {
    @include modifier(("responsive")) {
        &-auto {
            overflow: auto;
        }
        &-hidden {
            overflow: hidden;
        }
        &-visible {
            overflow: visible;
        }
        &-scroll {
            overflow: scroll;
        }
        &-x-auto {
            overflow-x: auto;
        }
        &-y-auto {
            overflow-y: auto;
        }
        &-x-hidden {
            overflow-x: hidden;
        }
        &-y-hidden {
            overflow-y: hidden;
        }
        &-x-visible {
            overflow-x: visible;
        }
        &-y-visible {
            overflow-y: visible;
        }
        &-x-scroll {
            overflow-x: scroll;
        }
        &-y-scroll {
            overflow-y: scroll;
        }
    }
}

$positionList: ("static", "fixed", "absolute", "relative", "sticky");
@each $pos in $positionList {
    .#{$pos} {
        @include modifier(("responsive")) {
            position: #{$pos};
        }
    }
}

.pos {
    &-0 {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }

    &-x {
        right: 0;
        left: 0;

        &-auto {
            right: auto;
            left: auto;
        }
    }

    &-y {
        top: 0;
        bottom: 0;

        &-auto {
            bottom: auto;
            top: auto;
        }
    }

    &-auto {
        top: auto;
        right: auto;
        bottom: auto;
        left: auto;
    }
}

.scrolling {
    @include modifier(("responsive")) {
        &-touch {
            -webkit-overflow-scrolling: touch;
        }
        &-auto {
            -webkit-overflow-scrolling: auto;
        }
    }
}

.shadow {
    @include modifier(("responsive", "hover", "focus")) {
        @if map-has-key($boxShadow, "default") {
            & {
                $value: map-get($boxShadow, "default");
                box-shadow: #{$value};
            }
        }

        @each $key, $value in $boxShadow {
            @if $key != "default" {
                &-#{$key} {
                    box-shadow: #{$value};
                }
            }
        }
    }
}

.text {
    @include modifier(("responsive", "hover", "focus")) {
        @include listSet(
            (
                "property": letter-spacing,
                "list": $letterSpacing,
            )
        );

        &-height {
            @include listSet(
                (
                    "property": line-height,
                    "list": $lineHeight,
                )
            );
        }

        &-uppercase {
            text-transform: uppercase;
        }

        &-lowercase {
            text-transform: lowercase;
        }

        &-capitalize {
            text-transform: capitalize;
        }

        &-normal-case {
            text-transform: none;
        }

        &-left {
            text-align: left;
        }

        &-right {
            text-align: right;
        }

        &-center {
            text-align: center;
        }

        &-justify {
            text-align: justify;
        }

        &-underline {
            text-decoration: underline;
        }

        &-line-through {
            text-decoration: line-through;
        }

        &-no-underline {
            text-decoration: none;
        }
    }
}

.display {
    display: block;
}

.visible {
    @include modifier(("responsive")) {
        visibility: visible;
    }
}

.invisible {
    @include modifier(("responsive")) {
        visibility: hidden;
    }
}

.pointer-events {
    @include modifier(("responsive")) {
        &-none {
            pointer-events: none;
        }
        &-auto {
            pointer-events: auto;
        }
    }
}

.container {
    @include modifier(("responsive")) {
        width: 100%;
        @include listSet(
            (
                "property": max-width,
                "list": $screens,
            )
        );
    }
}

.show {
    @include modifier(("responsive")) {
        visibility: visible;
        pointer-events: auto;
    }
}

.hide {
    @include modifier(("responsive")) {
        visibility: hidden;
        pointer-events: none;
    }
}

.z {
    @include modifier(("responsive")) {
        @include listSet(
            (
                "property": z-index,
                "list": $zIndex,
            )
        );
    }
}

.d {
    @include modifier(("responsive")) {
        &-hidden {
            display: none;
        }
        &-block {
            display: block;
        }
        &-inline-block {
            display: inline-block;
        }
        &-inline {
            display: inline;
        }
        &-flex {
            display: flex;
        }
        &-inline-flex {
            display: inline-flex;
        }
    }
}

.v-align {
    @include modifier(("responsive")) {
        &-baseline {
            vertical-align: baseline;
        }
        &-top {
            vertical-align: top;
        }
        &-middle {
            vertical-align: middle;
        }
        &-bottom {
            vertical-align: bottom;
        }
        &-text-top {
            vertical-align: text-top;
        }
        &-text-bottom {
            vertical-align: text-bottom;
        }
    }
}

.sr-only {
    @include modifier(("responsive", "focus")) {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
    }
}

.not-sr-only {
    @include modifier(("responsive", "focus")) {
        position: static;
        width: auto;
        height: auto;
        padding: 0;
        margin: 0;
        overflow: visible;
        clip: auto;
        white-space: normal;
    }
}

.whitespace {
    @include modifier(("responsive")) {
        white-space: normal;

        &-no-wrap {
            white-space: nowrap;
        }
        &-pre {
            white-space: pre;
        }
        &-pre-line {
            white-space: pre-line;
        }
        &-pre-wrap {
            white-space: pre-wrap;
        }
    }
}

.w-break {
    @include modifier(("responsive")) {
        word-break: normal;
        overflow-wrap: normal;
        &-words {
            overflow-wrap: break-word;
        }
        &-all {
            word-break: break-all;
        }
    }
}

.truncate {
    @include modifier(("responsive")) {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
}

.list {
    @include modifier(("responsive")) {
        @include listSet(
            (
                "property": list-style-type,
                "list": $listStyleType,
            )
        );

        &-inside {
            list-style-position: inside;
        }

        &-outside {
            list-style-position: outside;
        }
    }
}
